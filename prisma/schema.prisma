generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model properties {
  propertyID               Int               @id @default(autoincrement())
  propertyTag              String            @unique(map: "propertyTag_UNIQUE") @db.VarChar(100)
  propertyName             String            @db.VarChar(100)
  propertyServer           String            @db.VarChar(2048)
  propertyPort             Int?
  propertyConnectionString String?           @db.VarChar(2048)
  mpehotel                 Int?
  usersProperties          usersProperties[]
}

model requestRecords {
  requestID       Int      @id @default(autoincrement())
  requestBody     String   @db.Text
  requestType     String   @db.VarChar(8192)
  requestDateTime DateTime @db.DateTime(0)
  responseStatus  String?  @db.VarChar(20)
  responseBody    String?  @db.Text
  propertyID      Int
  seen            Boolean?
  uniqueKey       String?  @db.VarChar(255)
  seenAt          DateTime @default(dbgenerated("(_utf8mb4\\'1900-01-01 00:00:00\\')")) @db.DateTime(0)
}

model users {
  userID          Int               @id @default(autoincrement())
  firstName       String            @db.VarChar(50)
  secondName      String            @db.VarChar(50)
  email           String            @unique(map: "email") @db.VarChar(100)
  password        String            @db.VarChar(255)
  createdAt       DateTime?         @default(now()) @db.Timestamp(0)
  propertyID      Int?
  pin             String?           @db.VarChar(255)
  permissions     Int               @default(0)
  usersProperties usersProperties[]
}

model usersProperties {
  userID      Int
  propertyID  Int
  propertyTag String     @db.VarChar(10)
  properties  properties @relation(fields: [propertyID], references: [propertyID], onDelete: Cascade)
  users       users      @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@id([userID, propertyID, propertyTag])
  @@index([propertyID], map: "usersProperties_propertyID_fkey")
}

model requestRecordsReservations {
  requestID       Int      @id @default(autoincrement())
  requestBody     String   @db.Text
  requestType     String   @db.VarChar(8192)
  requestDateTime DateTime @db.DateTime(0)
  responseStatus  String?  @db.VarChar(20)
  responseBody    String?  @db.Text
  propertyID      Int
}

model counter {
  id          Int    @id @default(autoincrement())
  counterName String @db.VarChar(255)
  count       Int?   @default(0)
}

model requestRecordsReservationCI {
  requestID       Int      @id @default(autoincrement())
  requestBody     String   @db.Text
  requestType     String   @db.VarChar(20)
  requestDateTime DateTime @db.DateTime(0)
  responseStatus  String?  @db.VarChar(20)
  responseBody    String?  @db.Text
  propertyID      Int
}
